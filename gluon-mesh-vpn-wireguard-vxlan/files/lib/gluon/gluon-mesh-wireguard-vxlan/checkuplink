#!/bin/sh

xor2() {
	echo -n "${1:0:1}"
	echo -n "${1:1:1}" | tr '0123456789abcdef' '23016745ab89efcd'
}

interface_linklocal() {
	# We generate a predictable v6 address
	local macaddr="$(echo $(uci get wireguard.wireguard.privatekey | wg pubkey) |md5sum|sed 's/^\(..\)\(..\)\(..\)\(..\)\(..\).*$/02:\1:\2:\3:\4:\5/')"
	local oldIFS="$IFS"; IFS=':'; set -- $macaddr; IFS="$oldIFS"
	echo "fe80::$(xor2 "$1")$2:$3ff:fe$4:$5$6"
}

clean_port(){
	echo "$(echo $1 | sed -r 's/:[0-9]+$|\[|\]//g')"
}

check_handshake() {
	local MESH_VPN_IFACE=$(uci get wireguard.wireguard.iface)
	wg show $MESH_VPN_IFACE | grep -q handshake
	if [ $? == 1 ]; then
		local gateway="$(clean_port $1)"
		local peer="$(clean_port "$(wg show $MESH_VPN_IFACE | grep endpoint | awk '{print $2}')")"
		local other_ip=""
		if [ -n $peer ] ; then
			other_ip="$(gluon-wan nslookup $gateway | grep -v $peer | grep 'Address [0-9]')"
		fi
		if [ "$other_ip" == "" ]; then
			exit 1
		fi
		echo "$(echo $other_ip | sed -r s/Address\ [0-9]://)$(echo $1 | egrep -oe :[0-9]+$)"
		exit 0
	fi
	exit 1
}

# Do we already have a private-key? If not generate one
temp=$(uci get wireguard.wireguard.privatekey);
if [ "$?" -ne "0" ]; then
	uci set wireguard.wireguard.privatekey=$(wg genkey);
	uci commit wireguard
fi

#Set Debug SSID
if [ $(uci get gluon.debug||echo false) = 'true' ] ; then :
        suffix="$(uci get network.bat0.macaddr | sed "s/://g; s/^......//g")"
        if ! grep -q "muenchen.freifunk.net/$suffix" /etc/config/wireless ; then
                sed "s|muenchen.freifunk.net/.*|muenchen.freifunk.net/$suffix'|g" /etc/config/wireless -i
                wifi
        fi
#       sed "s|muenchen.freifunk.net/.*|$(echo muenchen.freifunk.net/$(uci get network.bat0.macaddr | sed "s/://g; s/^........//g"))'|g" /etc/config/wireless -i

fi


# Is wireguard enabled?
if [ "$(uci get wireguard.wireguard.enabled)" == "true" ] || [ "$(uci get wireguard.wireguard.enabled)" == "1" ]; then

	#We assume we are not connected by default
	CONNECTED=0

	MESH_VPN_IFACE=$(uci get wireguard.wireguard.iface)

	# Check connectivity to supernode
	ping -c1 -w2  $(wg  | grep fe80 | cut -d'/' -f1 | awk '{print $3}')%$MESH_VPN_IFACE
	if [ $? == 0 ]; then
			CONNECTED=1
	fi

	# If we don't have a connection we try to connect
	if [ $CONNECTED != 1 ]; then
		gluon-wan /usr/sbin/ntpd -n -N -S /usr/sbin/ntpd-hotplug -p ntp.ext.ffmuc.net -q

		# Get the number of configured peers and randomly select one
		NUMBER_OF_PEERS=$(uci -q show wireguard | egrep -ce peer_[0-9]+.endpoint)
		PEER=$(awk 'BEGIN{srand();print int(rand()*($NUMBER_OF_PEERS)+1) }')

		endpoint="$(check_handshake "$(uci get wireguard.peer_$PEER.endpoint)")"

		# Delete Interfaces
		ip link set nomaster bat0 dev mesh-vpn &> /dev/null
		ip link delete dev mesh-vpn &> /dev/null
		ip link del $MESH_VPN_IFACE &> /dev/null
		PUBLICKEY=$(uci get wireguard.wireguard.privatekey | wg pubkey)
		SEGMENT=$(uci get gluon.core.domain)
                LISTENPORT=$(uci get wireguard.wireguard.listen_port||echo 0)

                # For future use
                gluon-wan wget -q  -O- --post-data='{"segment": "'"$SEGMENT"'","public_key": "'"$PUBLICKEY"'"}' http://gw03.ext.ffmuc.net:5000/api/v1/wg/key/exchange

		# Bring up the wireguard interface
		ip link add dev $MESH_VPN_IFACE type wireguard
		uci get wireguard.wireguard.privatekey | wg set $MESH_VPN_IFACE private-key /proc/self/fd/0
		ip link set up dev $MESH_VPN_IFACE

		# Add link-address and Peer
		ip address add "$(interface_linklocal "$MESH_VPN_IFACE")"/64 dev $MESH_VPN_IFACE
		if [ "$endpoint" == "" ]; then
			endpoint=$(uci get wireguard.peer_$PEER.endpoint)
		fi
		gluon-wan wg set $MESH_VPN_IFACE listen-port $LISTENPORT peer $(uci get wireguard.peer_$PEER.publickey) persistent-keepalive 25 allowed-ips $(uci get wireguard.peer_$PEER.link_address)/128 endpoint $endpoint
		
		# We need to allow incoming vxlan traffic on mesh iface
		sleep 10
        	ip6tables -I INPUT 1 -i $MESH_VPN_IFACE -m udp -p udp --dport 8472 -j ACCEPT
		
		# Bring up VXLAN
		ip link add mesh-vpn type vxlan id "$(lua -e 'print(tonumber(require("gluon.util").domain_seed_bytes("gluon-mesh-vpn-vxlan", 3), 16))')" local $(interface_linklocal "$MESH_VPN_IFACE") remote $(uci get wireguard.peer_$PEER.link_address) dstport 8472 dev $MESH_VPN_IFACE
		ip link set up dev mesh-vpn

		# If we have a BATMAN_V env we need to correct the throughput value now
		if [ -f /sys/devices/virtual/net/mesh-vpn/batman_adv/throughput_override ]; then echo 1000000 > /sys/devices/virtual/net/mesh-vpn/batman_adv/throughput_override; fi
	fi
fi
